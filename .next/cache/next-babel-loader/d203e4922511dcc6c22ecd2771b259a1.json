{"ast":null,"code":"import { useState, useRef, useEffect } from \"react\";\n\nfunction useSticky() {\n  const {\n    0: isSticky,\n    1: setSticky\n  } = useState(false);\n  const element = useRef(null);\n\n  const handleScroll = () => {\n    if (!element.current) return;\n\n    if (window.scrollY > element.current.getBoundingClientRect().bottom) {\n      setSticky(true);\n    } else {\n      setSticky(false);\n    }\n  };\n\n  const debounce = (func, wait = 80, immediate = true) => {\n    let timeOut;\n    return () => {\n      let context = this,\n          args = arguments;\n\n      const later = () => {\n        timeOut = null;\n        if (!immediate) func.apply(context, args);\n      };\n\n      const callNow = immediate && !timeOut;\n      clearTimeout(timeOut);\n      timeOut = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", debounce(handleScroll));\n    return () => {\n      window.removeEventListener(\"scroll\", () => handleScroll);\n    };\n  }, [debounce, handleScroll]);\n  return {\n    isSticky,\n    element\n  };\n}\n\nexport default useSticky;","map":null,"metadata":{},"sourceType":"module"}