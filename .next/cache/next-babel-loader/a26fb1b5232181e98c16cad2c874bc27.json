{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LOGIN_USER from '../graphql/mutation/login';\nimport { validateEmail } from '../utils/validation';\nimport { setToken } from '../utils/apolloClient';\nimport Cookies from 'js-cookie';\nimport Button from '@material-ui/core/Button';\nimport { toast } from 'react-toastify';\nimport Router from 'next/router';\nimport { useMutation } from '@apollo/react-hooks';\nimport { withApollo } from '../lib/withApolloData';\n\nfunction Copyright() {\n  return __jsx(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    align: \"center\"\n  }, 'Copyright Â© ', __jsx(Link, {\n    color: \"inherit\",\n    href: \"https://material-ui.com/\"\n  }, \"developer masa\"), ' ', new Date().getFullYear(), '.');\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: '100vh'\n  },\n  image: {\n    backgroundImage: 'url(https://source.unsplash.com/random)',\n    backgroundRepeat: 'no-repeat',\n    backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\n    backgroundSize: 'cover',\n    backgroundPosition: 'center'\n  },\n  paper: {\n    margin: theme.spacing(8, 4),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main\n  },\n  form: {\n    width: '100%',\n    // Fix IE 11 issue.\n    marginTop: theme.spacing(1)\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2)\n  }\n})); // const InitialState ={\n//   email:\"\",\n//   password:\"\"\n// }\n// interface Login {\n//   [key: string]: any;\n//   email:string;\n//   password:string\n// }\n// interface LoginProps {} \n\nconst login = () => {\n  const {\n    0: props,\n    1: setProps\n  } = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  const [login, {\n    data\n  }] = useMutation(LOGIN_USER);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    console.log('value:', value);\n    setProps(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n      [name]: value\n    }));\n  };\n\n  useEffect(() => {\n    const loginData = async () => {\n      if (data) {\n        // const { data } = await user.query({query: LOGIN_USER,variables: { ...props },});\n        const {\n          token,\n          userId\n        } = data.login;\n        console.log(\"token\", token);\n        setToken(token);\n        Cookies.set('userId', userId, {\n          expires: 7\n        });\n      }\n    };\n\n    loginData();\n  }, [data]); // eslint-disable-line\n\n  const handleSubmit = async event => {\n    console.log(\"email\", props, \"email\", props.email);\n    event.preventDefault();\n\n    try {\n      if (validateEmail(props.email)) {\n        await login({\n          variables: _objectSpread({}, props)\n        });\n        Router.replace('/dashboard');\n      } else {\n        toast.error('Invalid Email');\n      }\n    } catch (error) {\n      toast.error(error);\n    }\n  };\n\n  const classes = useStyles();\n  return __jsx(Grid, {\n    container: true,\n    component: \"main\",\n    className: classes.root\n  }, __jsx(CssBaseline, null), __jsx(Grid, {\n    item: true,\n    xs: false,\n    sm: 4,\n    md: 7,\n    className: classes.image\n  }), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 8,\n    md: 5,\n    component: Paper,\n    elevation: 6,\n    square: true\n  }, __jsx(\"div\", {\n    className: classes.paper\n  }, __jsx(Avatar, {\n    className: classes.avatar\n  }, __jsx(LockOutlinedIcon, null)), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\"\n  }, \"\\u3054\\u62C5\\u5F53\\u8005\\u69D8\\u30ED\\u30B0\\u30A4\\u30F3\\u30DA\\u30FC\\u30B8\"), __jsx(\"form\", {\n    className: classes.form,\n    noValidate: true,\n    onSubmit: handleSubmit\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    id: \"email\",\n    label: \"Email Address\",\n    name: \"email\",\n    value: props.email,\n    onChange: handleChange,\n    autoComplete: \"email\",\n    autoFocus: true\n  }), __jsx(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    fullWidth: true,\n    name: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    value: props.password,\n    onChange: handleChange,\n    id: \"password\",\n    autoComplete: \"current-password\"\n  }), __jsx(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    value: \"Submit\"\n  }, \"Sign In\"), __jsx(Box, {\n    mt: 5\n  }, __jsx(Copyright, null))))));\n};\n\nexport default withApollo({\n  ssr: true\n})(login);","map":null,"metadata":{},"sourceType":"module"}