{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport { setTokenInRequest } from './apolloClient';\n\nconst getDisplayName = Component => Component.displayName || Component.name || 'Component';\n\nexport const auth = ctx => {\n  const {\n    token,\n    userId\n  } = nextCookie(ctx);\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/'\n    });\n    ctx.res.end();\n    return;\n  }\n\n  if (!token) {\n    Router.push('/');\n  }\n\n  return {\n    token,\n    userId\n  };\n};\nexport const withAuthSync = WrappedComponent => {\n  var _class, _temp;\n\n  return _temp = _class = class extends React.Component {\n    static async getInitialProps(ctx) {\n      const {\n        token,\n        userId\n      } = auth(ctx);\n      await setTokenInRequest(token);\n      const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n      return _objectSpread(_objectSpread({}, componentProps), {}, {\n        token,\n        userId\n      });\n    }\n\n    render() {\n      return __jsx(WrappedComponent, this.props);\n    }\n\n  }, _defineProperty(_class, \"displayName\", `withAuthSync(${getDisplayName(WrappedComponent)})`), _temp;\n};","map":null,"metadata":{},"sourceType":"module"}