{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { IconButton } from '@material-ui/core'; // import Edit from \"@material-ui/icons/Edit\";\n// import DialogEdit from './DialogEdit'\n\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { withApollo } from '../lib/withApolloData';\nimport moment from \"moment\";\nimport { useRouter } from 'next/router';\nimport Router from 'next/router'; // import { toast } from 'react-toastify';\n// import Router from 'next/router';\n\nimport Loader from '../components/Loading';\nimport DELETE_POST from '../graphql/mutation/deletePost';\nimport GET_SOMEPOSTS from '../graphql/query/somePosts';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport Edit from \"@material-ui/icons/Edit\";\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles(theme => ({\n  seeMore: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst TableMain = () => {\n  const [deletePost] = useMutation(DELETE_POST);\n  const [open, setOpen] = React.useState(false);\n  const {\n    0: route,\n    1: setRoute\n  } = useState(false);\n  const {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(GET_SOMEPOSTS);\n  let message = 'Notices';\n  if (loading) message = 'Loading...';\n  if (error) message = `Error! ${error}`; // if (data && data.somePosts.length <= 0) message = 'No Posts';\n\n  useEffect(() => {\n    if (route) {\n      Router.reload();\n    }\n  });\n  console.log('data', data);\n\n  const fetchMoreData = () => {\n    const {\n      endCursor\n    } = data.somePosts.pageInfo;\n    console.log(\"end\", endCursor);\n    fetchMore({\n      variables: {\n        after: endCursor\n      },\n      updateQuery: (previousResult, {\n        fetchMoreResult\n      }) => {\n        // console.log(prevResult);// console.log(fetchMoreResult)\n        const newEdges = fetchMoreResult.somePosts.edges;\n        const pageInfo = fetchMoreResult.somePosts.pageInfo;\n        const totalCount = fetchMoreResult.somePosts.totalCount; // return newEdges.length\n        // return pageInfo.hasNextPage\n\n        return newEdges.length ? {\n          // Put the new comments at the end of the list and update `pageInfo`\n          // so we have the new `endCursor` and `hasNextPage` values\n          somePosts: {\n            __typename: previousResult.somePosts.__typename,\n            edges: [...previousResult.somePosts.edges, ...newEdges],\n            pageInfo,\n            totalCount\n          }\n        } : previousResult;\n      }\n    });\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const ReadLimit = ({\n    children,\n    maxCharacter = 25\n  }) => {\n    const text = children;\n    const resultString = text.slice(0, maxCharacter);\n    return __jsx(\"div\", null, resultString);\n  };\n\n  const router = useRouter();\n  console.log('router', router.query.postUrl);\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(Title, null, \"\\u307F\\u3093\\u306A\\u306E\\u7559\\u5B66\\u4F53\\u9A13\\u8AC7\"), __jsx(Table, {\n    size: \"small\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"\\u6295\\u7A3F\\u65E5\"), __jsx(TableCell, null, \"\\u540D\\u524D\"), __jsx(TableCell, null, \"\\u6295\\u7A3F\\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"\\u5185\\u5BB9\"), __jsx(TableCell, null, \"\\u66F4\\u65B0\"), __jsx(TableCell, null, \"\\u524A\\u9664\"))), __jsx(TableBody, null, loading ? __jsx(Loader, null) : data && data.somePosts && data.somePosts.edges.map(({\n    node: somePost\n  }, i) => __jsx(TableRow, {\n    key: i\n  }, __jsx(TableCell, null, moment(somePost.createdAt).format(\"YYYY/MM/DD\")), __jsx(TableCell, null, somePost.username), __jsx(TableCell, null, somePost.postTitle), __jsx(TableCell, null, __jsx(ReadLimit, null, somePost.description)), __jsx(TableCell, null, __jsx(Link, {\n    href: `/dashboard/[dashboard]?dashboard=${somePost._id}`,\n    as: `/dashboard/${somePost._id}`\n  }, __jsx(IconButton, {\n    color: \"primary\",\n    onClick: handleClickOpen\n  }, __jsx(Edit, {\n    fontSize: \"small\",\n    style: {\n      color: \"#427bf5\",\n      height: \"2rem\",\n      width: \"1.8rem\",\n      marginLeft: \"-.5em\"\n    }\n  })))), __jsx(TableCell, null, __jsx(IconButton, {\n    onClick: () => {\n      deletePost({\n        variables: {\n          _id: somePost._id\n        }\n      }), setRoute(!route);\n    }\n  }, __jsx(DeleteForeverIcon, {\n    style: {\n      color: \"red\",\n      height: \"2rem\",\n      width: \"1.8rem\",\n      marginLeft: \"-.5em\"\n    }\n  }))))))), data && data.somePosts.pageInfo.hasNextPage ? __jsx(\"div\", {\n    className: classes.seeMore\n  }, __jsx(\"button\", {\n    onClick: fetchMoreData\n  }, \"More\")) : __jsx(\"div\", {\n    className: classes.seeMore\n  }, __jsx(\"button\", null, \"No More Data\")));\n};\n\nexport default withApollo({\n  ssr: true\n})(TableMain);","map":null,"metadata":{},"sourceType":"module"}