{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { IconButton } from '@material-ui/core'; // import Edit from \"@material-ui/icons/Edit\";\n// import DialogEdit from './DialogEdit'\n\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { withApollo } from '../lib/withApolloData';\nimport moment from \"moment\";\nimport { useRouter } from 'next/router';\nimport Router from 'next/router'; // import { toast } from 'react-toastify';\n// import Router from 'next/router';\n\nimport Loader from '../components/Loading';\nimport DELETE_POST from '../graphql/mutation/deletePost';\nimport GET_SOMEPOSTS from '../graphql/query/somePosts';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport Edit from \"@material-ui/icons/Edit\";\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    seeMore: {\n      marginTop: theme.spacing(3)\n    }\n  };\n});\n\nvar TableMain = function TableMain() {\n  var _useMutation = useMutation(DELETE_POST),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      deletePost = _useMutation2[0];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _useState = useState(false),\n      route = _useState[0],\n      setRoute = _useState[1];\n\n  var _useQuery = useQuery(GET_SOMEPOSTS),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      fetchMore = _useQuery.fetchMore;\n\n  var message = 'Notices';\n  if (loading) message = 'Loading...';\n  if (error) message = \"Error! \".concat(error); // if (data && data.somePosts.length <= 0) message = 'No Posts';\n\n  useEffect(function () {\n    if (route) {\n      Router.reload();\n    }\n  });\n  console.log('data', data);\n\n  var fetchMoreData = function fetchMoreData() {\n    var endCursor = data.somePosts.pageInfo.endCursor;\n    console.log(\"end\", endCursor);\n    fetchMore({\n      variables: {\n        after: endCursor\n      },\n      updateQuery: function updateQuery(previousResult, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n        // console.log(prevResult);// console.log(fetchMoreResult)\n        var newEdges = fetchMoreResult.somePosts.edges;\n        var pageInfo = fetchMoreResult.somePosts.pageInfo;\n        var totalCount = fetchMoreResult.somePosts.totalCount; // return newEdges.length\n        // return pageInfo.hasNextPage\n\n        return newEdges.length ? {\n          // Put the new comments at the end of the list and update `pageInfo`\n          // so we have the new `endCursor` and `hasNextPage` values\n          somePosts: {\n            __typename: previousResult.somePosts.__typename,\n            edges: [].concat(_toConsumableArray(previousResult.somePosts.edges), _toConsumableArray(newEdges)),\n            pageInfo: pageInfo,\n            totalCount: totalCount\n          }\n        } : previousResult;\n      }\n    });\n  };\n\n  var handleClickOpen = function handleClickOpen() {\n    setOpen(true);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  var ReadLimit = function ReadLimit(_ref2) {\n    var children = _ref2.children,\n        _ref2$maxCharacter = _ref2.maxCharacter,\n        maxCharacter = _ref2$maxCharacter === void 0 ? 25 : _ref2$maxCharacter;\n    var text = children;\n    var resultString = text.slice(0, maxCharacter);\n    return __jsx(\"div\", null, resultString);\n  };\n\n  var router = useRouter();\n  console.log('router', router.query.postUrl);\n  var classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(Title, null, \"\\u307F\\u3093\\u306A\\u306E\\u7559\\u5B66\\u4F53\\u9A13\\u8AC7\"), __jsx(Table, {\n    size: \"small\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"\\u6295\\u7A3F\\u65E5\"), __jsx(TableCell, null, \"\\u540D\\u524D\"), __jsx(TableCell, null, \"\\u6295\\u7A3F\\u30BF\\u30A4\\u30C8\\u30EB\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"\\u5185\\u5BB9\"), __jsx(TableCell, null, \"\\u66F4\\u65B0\"), __jsx(TableCell, null, \"\\u524A\\u9664\"))), __jsx(TableBody, null, loading ? __jsx(Loader, null) : data && data.somePosts && data.somePosts.edges.map(function (_ref3, i) {\n    var somePost = _ref3.node;\n    return __jsx(TableRow, {\n      key: i\n    }, __jsx(TableCell, null, moment(somePost.createdAt).format(\"YYYY/MM/DD\")), __jsx(TableCell, null, somePost.username), __jsx(TableCell, null, somePost.postTitle), __jsx(TableCell, null, __jsx(ReadLimit, null, somePost.description)), __jsx(TableCell, null, __jsx(Link, {\n      href: \"/dashboard/[dashboard]?dashboard=\".concat(somePost._id),\n      as: \"/dashboard/\".concat(somePost._id)\n    }, __jsx(IconButton, {\n      color: \"primary\",\n      onClick: handleClickOpen\n    }, __jsx(Edit, {\n      fontSize: \"small\",\n      style: {\n        color: \"#427bf5\",\n        height: \"2rem\",\n        width: \"1.8rem\",\n        marginLeft: \"-.5em\"\n      }\n    })))), __jsx(TableCell, null, __jsx(IconButton, {\n      onClick: function onClick() {\n        deletePost({\n          variables: {\n            _id: somePost._id\n          }\n        }), setRoute(!route);\n      }\n    }, __jsx(DeleteForeverIcon, {\n      style: {\n        color: \"red\",\n        height: \"2rem\",\n        width: \"1.8rem\",\n        marginLeft: \"-.5em\"\n      }\n    }))));\n  }))), data && data.somePosts.pageInfo.hasNextPage ? __jsx(\"div\", {\n    className: classes.seeMore\n  }, __jsx(\"button\", {\n    onClick: fetchMoreData\n  }, \"More\")) : __jsx(\"div\", {\n    className: classes.seeMore\n  }, __jsx(\"button\", null, \"No More Data\")));\n};\n\nexport default withApollo({\n  ssr: true\n})(TableMain);","map":null,"metadata":{},"sourceType":"module"}