{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { IconButton, Typography } from '@material-ui/core';\nimport moment from 'moment'; // import Edit from \"@material-ui/icons/Edit\";\n// import DialogEdit from './DialogEdit'\n\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { withApollo } from '../lib/withApolloData';\nimport Router from 'next/router';\nimport DELETE_NOTICE from '../graphql/mutation/deleteNotice';\nimport GET_NOTICES from '../graphql/query/notices';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nvar useStyles = makeStyles(function (theme) {\n  return {\n    seeMore: {\n      marginTop: theme.spacing(3)\n    }\n  };\n}); // interface Data {\n//   users: [Notices];\n// }\n\nvar TableNotice = function TableNotice() {\n  var _useMutation = useMutation(DELETE_NOTICE),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      deleteNotice = _useMutation2[0];\n\n  var _useState = useState(false),\n      route = _useState[0],\n      setRoute = _useState[1];\n\n  var _useState2 = useState(true),\n      isShrinked = _useState2[0],\n      setIsShrinked = _useState2[1];\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _useQuery = useQuery(GET_NOTICES),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading,\n      refetch = _useQuery.refetch;\n\n  var message = 'Notices';\n  if (loading) message = 'Loading...';\n  if (error) message = \"Error! \".concat(error);\n  if (data && data.notices.length <= 0) message = 'お知らせは今のところありません';\n  useEffect(function () {\n    if (route) {\n      Router.reload();\n    }\n  });\n\n  var handleClickOpen = function handleClickOpen() {\n    setOpen(true);\n  };\n\n  var handleClose = function handleClose() {\n    setOpen(false);\n  };\n\n  var ReadLimit = function ReadLimit(_ref) {\n    var children = _ref.children,\n        _ref$maxCharacter = _ref.maxCharacter,\n        maxCharacter = _ref$maxCharacter === void 0 ? 200 : _ref$maxCharacter;\n    var text = children;\n    var resultString = text.slice(0, maxCharacter);\n    return __jsx(TableCell, {\n      align: \"center\"\n    }, resultString);\n  };\n\n  var classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(Title, null, \"\\u304A\\u77E5\\u3089\\u305B\\u30DC\\u30FC\\u30C9\"), __jsx(Table, {\n    size: \"small\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"\\u6295\\u7A3F\\u65E5\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"\\u5185\\u5BB9\"), __jsx(TableCell, null), __jsx(TableCell, null, \"\\u524A\\u9664\"))), __jsx(TableBody, null, loading ? __jsx(Typography, null, \"\\u304A\\u77E5\\u3089\\u305B\\u3092\\u8AAD\\u307F\\u8FBC\\u4E2D\\u3067\\u3059\") : data && data.notices.map(function (n) {\n    return __jsx(TableRow, {\n      key: n._id,\n      \"data-id\": n._id\n    }, __jsx(TableCell, null, \" \", moment(n.createdAt).format(\"YYYY/MM/DD\")), __jsx(TableCell, null, n.body), __jsx(TableCell, null), __jsx(TableCell, null, __jsx(IconButton, {\n      onClick: function onClick() {\n        deleteNotice({\n          variables: {\n            _id: n._id\n          }\n        }), setRoute(!route);\n      }\n    }, __jsx(DeleteForeverIcon, {\n      style: {\n        color: \"red\",\n        height: \"2.5rem\",\n        width: \"2.5rem\",\n        marginLeft: \"-.5em\"\n      }\n    }))));\n  }))));\n}; // export default TableNotice\n\n\nexport default withApollo({\n  ssr: true\n})(TableNotice);","map":null,"metadata":{},"sourceType":"module"}