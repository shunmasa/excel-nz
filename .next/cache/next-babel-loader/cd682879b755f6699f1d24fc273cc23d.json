{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Button, LinearProgress } from \"@material-ui/core\";\nimport { TextField } from 'formik-material-ui';\nimport { toast } from 'react-toastify';\nimport Router from 'next/router';\nimport { useMutation } from '@apollo/react-hooks';\nimport { withApollo } from '../lib/withApolloData';\nimport Typography from '@material-ui/core/Typography';\nimport CREATE_NOTICE from '../graphql/mutation/createNotice';\nimport { Field, Formik, Form } from \"formik\";\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    formContainer: {\n      width: \"90%\",\n      marginTop: \"2rem\",\n      marginRight: '5%',\n      marginLeft: '5%'\n    },\n    bodyField: {\n      marginTop: \"2rem\",\n      marginBottom: \"1rem\",\n      width: \"100%\"\n    }\n  });\n});\n\nvar NoticeForm = function NoticeForm() {\n  var _useMutation = useMutation(CREATE_NOTICE),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createNotice = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  var _useState = useState(false),\n      route = _useState[0],\n      setRoute = _useState[1];\n\n  var classes = useStyles();\n  useEffect(function () {\n    if (route) {\n      Router.reload();\n    }\n  });\n  return __jsx(Formik, {\n    initialValues: {\n      body: ''\n    },\n    validate: function validate(values) {\n      console.log('value', values);\n      var errors = {};\n\n      if (!values.body) {\n        errors.body = '入力必須です';\n      }\n\n      return errors;\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n        var setSubmitting;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setSubmitting = _ref.setSubmitting;\n                _context.prev = 1;\n                event.preventDefault();\n                _context.next = 5;\n                return createNotice({\n                  variables: {\n                    body: values.body\n                  }\n                });\n\n              case 5:\n                toast.success('お知らせが作成されました');\n                Router.reload();\n                setSubmitting(false);\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                toast.error('サーバーエラーのためデータ送信できませんでした');\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  }, function (_ref3) {\n    var submitForm = _ref3.submitForm,\n        isSubmitting = _ref3.isSubmitting;\n    return __jsx(Form, {\n      className: classes.formContainer\n    }, __jsx(Typography, {\n      style: {\n        color: \"#fff\",\n        fontSize: \"23px\"\n      }\n    }, \"\\u304A\\u77E5\\u3089\\u305B\\u306E\\u4F5C\\u6210\"), __jsx(Field, {\n      className: classes.bodyField,\n      component: TextField,\n      type: \"text\",\n      label: \"\\u304A\\u77E5\\u3089\\u305B\\u5185\\u5BB9\",\n      name: \"body\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      multiline: true,\n      rows: 10,\n      required: true,\n      fullWidth: true\n    }), __jsx(\"br\", null), isSubmitting && __jsx(LinearProgress, null), __jsx(\"br\", null), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: isSubmitting,\n      onClick: submitForm\n    }, \"Submit\"));\n  });\n}; // export default NoticeForm\n\n\nexport default withApollo({\n  ssr: true\n})(NoticeForm);","map":null,"metadata":{},"sourceType":"module"}