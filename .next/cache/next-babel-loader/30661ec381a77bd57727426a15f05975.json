{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport Cookies from '../node_modules/js-cookie';\nimport { split, ApolloLink, concat } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { WebSocketLink } from 'apollo-link-ws';\n\nconst {\n  createUploadLink\n} = require('apollo-upload-client');\n\nlet authToken = null;\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  operation.setContext({\n    headers: {\n      authorization: authToken || null\n    }\n  }); // Add onto payload for WebSocket authentication\n\n  operation.authToken = authToken;\n  return forward(operation);\n});\nconst webSocketLink = false ? new WebSocketLink({\n  uri: \"ws://localhost:4020/graphql\",\n  options: {\n    reconnect: true\n  }\n}) : null;\n/**\n * Set Token\n * @param token\n */\n\nexport const setToken = async token => {\n  try {\n    authToken = token ? `Bearer ${token}` : null;\n    Cookies.set('token', authToken, {\n      expires: 7\n    });\n  } catch (error) {\n    // tslint:disable-next-line:no-console\n    console.log(error);\n  }\n};\n/**\n * Set Token In Request\n * @param token\n */\n\nexport const setTokenInRequest = async token => {\n  try {\n    authToken = token ? token : null;\n    return authToken;\n  } catch (error) {\n    // tslint:disable-next-line:no-console\n    console.log(error);\n  }\n};\n/**\n * Destroy Token\n * For logout purpose\n */\n\nexport const destroyToken = async () => {\n  try {\n    Cookies.remove('token');\n    authToken = null;\n  } catch (error) {\n    // tslint:disable-next-line:no-console\n    console.log(error);\n  }\n};\nconst isBrowser = false;\nconst httpLink = createUploadLink({\n  uri: \"http://localhost:4020/graphql\",\n  credentials: \"same-origin\",\n  fetch: !isBrowser && fetch\n});\nconst link = false ? split(({\n  query\n}) => {\n  const {\n    kind,\n    operation\n  } = getMainDefinition(query);\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}, webSocketLink, httpLink) : httpLink;\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: concat(authMiddleware, link),\n    //createUploadLink\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}