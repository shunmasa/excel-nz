{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { IconButton, Typography } from '@material-ui/core';\nimport moment from 'moment'; // import Edit from \"@material-ui/icons/Edit\";\n// import DialogEdit from './DialogEdit'\n\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { withApollo } from '../lib/withApolloData';\nimport Router from 'next/router';\nimport DELETE_NOTICE from '../graphql/mutation/deleteNotice';\nimport GET_NOTICES from '../graphql/query/notices';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles(theme => ({\n  seeMore: {\n    marginTop: theme.spacing(3)\n  }\n})); // interface Data {\n//   users: [Notices];\n// }\n\nconst TableNotice = () => {\n  const [deleteNotice] = useMutation(DELETE_NOTICE);\n  const {\n    0: route,\n    1: setRoute\n  } = useState(false);\n  const {\n    0: isShrinked,\n    1: setIsShrinked\n  } = useState(true);\n  const [open, setOpen] = React.useState(false);\n  const {\n    data,\n    error,\n    loading,\n    refetch\n  } = useQuery(GET_NOTICES);\n  let message = 'Notices';\n  if (loading) message = 'Loading...';\n  if (error) message = `Error! ${error}`;\n  if (data && data.notices.length <= 0) message = 'お知らせは今のところありません';\n  useEffect(() => {\n    if (route) {\n      Router.reload();\n    }\n  });\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const ReadLimit = ({\n    children,\n    maxCharacter = 200\n  }) => {\n    const text = children;\n    const resultString = text.slice(0, maxCharacter);\n    return __jsx(TableCell, {\n      align: \"center\"\n    }, resultString);\n  };\n\n  const classes = useStyles();\n  return __jsx(React.Fragment, null, __jsx(Title, null, \"\\u304A\\u77E5\\u3089\\u305B\\u30DC\\u30FC\\u30C9\"), __jsx(Table, {\n    size: \"small\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"\\u6295\\u7A3F\\u65E5\"), __jsx(TableCell, {\n    align: \"center\"\n  }, \"\\u5185\\u5BB9\"), __jsx(TableCell, null), __jsx(TableCell, null, \"\\u524A\\u9664\"))), __jsx(TableBody, null, loading ? __jsx(Typography, null, \"\\u304A\\u77E5\\u3089\\u305B\\u3092\\u8AAD\\u307F\\u8FBC\\u4E2D\\u3067\\u3059\") : data && data.notices.map(n => __jsx(TableRow, {\n    key: n._id,\n    \"data-id\": n._id\n  }, __jsx(TableCell, null, \" \", moment(n.createdAt).format(\"YYYY/MM/DD\")), __jsx(TableCell, null, n.body), __jsx(TableCell, null), __jsx(TableCell, null, __jsx(IconButton, {\n    onClick: () => {\n      deleteNotice({\n        variables: {\n          _id: n._id\n        }\n      }), setRoute(!route);\n    }\n  }, __jsx(DeleteForeverIcon, {\n    style: {\n      color: \"red\",\n      height: \"2.5rem\",\n      width: \"2.5rem\",\n      marginLeft: \"-.5em\"\n    }\n  }))))))));\n}; // export default TableNotice\n\n\nexport default withApollo({\n  ssr: true\n})(TableNotice);","map":null,"metadata":{},"sourceType":"module"}