{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport Cookies from '../node_modules/js-cookie';\nimport { split, ApolloLink, concat } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { WebSocketLink } from 'apollo-link-ws';\n\nvar _require = require('apollo-upload-client'),\n    createUploadLink = _require.createUploadLink;\n\nvar authToken = null;\nvar authMiddleware = new ApolloLink(function (operation, forward) {\n  operation.setContext({\n    headers: {\n      authorization: authToken || null\n    }\n  }); // Add onto payload for WebSocket authentication\n\n  operation.authToken = authToken;\n  return forward(operation);\n});\nvar webSocketLink = true ? new WebSocketLink({\n  uri: \"ws://localhost:4020/graphql\",\n  options: {\n    reconnect: true\n  }\n}) : null;\n/**\n * Set Token\n * @param token\n */\n\nexport var setToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              authToken = token ? \"Bearer \".concat(token) : null;\n              Cookies.set('token', authToken, {\n                expires: 7\n              });\n            } catch (error) {\n              // tslint:disable-next-line:no-console\n              console.log(error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function setToken(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Set Token In Request\n * @param token\n */\n\nexport var setTokenInRequest = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            authToken = token ? token : null;\n            return _context2.abrupt(\"return\", authToken);\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            // tslint:disable-next-line:no-console\n            console.log(_context2.t0);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 5]]);\n  }));\n\n  return function setTokenInRequest(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Destroy Token\n * For logout purpose\n */\n\nexport var destroyToken = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            try {\n              Cookies.remove('token');\n              authToken = null;\n            } catch (error) {\n              // tslint:disable-next-line:no-console\n              console.log(error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function destroyToken() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar isBrowser = true;\nvar httpLink = createUploadLink({\n  uri: \"http://localhost:4020/graphql\",\n  credentials: \"same-origin\",\n  fetch: !isBrowser && fetch\n});\nvar link = true ? split(function (_ref4) {\n  var query = _ref4.query;\n\n  var _getMainDefinition = getMainDefinition(query),\n      kind = _getMainDefinition.kind,\n      operation = _getMainDefinition.operation;\n\n  return kind === 'OperationDefinition' && operation === 'subscription';\n}, webSocketLink, httpLink) : httpLink;\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: concat(authMiddleware, link),\n    //createUploadLink\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}