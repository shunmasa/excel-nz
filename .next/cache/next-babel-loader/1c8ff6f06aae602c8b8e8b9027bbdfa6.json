{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from \"next/router\";\nimport { Paper, Grid, Typography, Button, Box, FormControlLabel, FormGroup, Switch, TableFooter, TableRow, TablePagination } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport ScrollAnimation from '../node_modules/react-animate-on-scroll';\nimport Link from 'next/link';\nimport Loading from '../components/Loading';\nvar useStyles = makeStyles(function (theme) {\n  return createStyles({\n    papper: _defineProperty({\n      height: \"100%\",\n      maxWidth: '80%',\n      margin: \"8em 13em 15em 13em\"\n    }, theme.breakpoints.down(\"sm\"), {\n      maxWidth: \"80%\",\n      marginTop: \"3rem\",\n      marginRight: \"10%\",\n      marginLeft: \"10%\",\n      marginBottom: \"3rem\"\n    }),\n    card: {\n      margin: \"3em 2em 3em 2em\",\n      height: \"100%\",\n      maxHeight: \"600px\",\n      transition: \"0.3s\",\n      boxShadow: \"0 8px 40px -12px rgba(0,  0, 0, 0.3)\",\n      border: \"2px solid #f5f2eb\",\n      '&:hover': {\n        boxShadow: \"0 16px 70px -12.125px rgba(0, 0, 0, 0.3)\"\n      }\n    },\n    file: {\n      marginRight: \"2.5%\",\n      marginLeft: \"2.5%\",\n      width: \"95%\",\n      height: 160\n    },\n    \"switch\": {\n      marginTop: \"5em\"\n    },\n    pagination: {\n      width: \"100%\",\n      marginBottom: \"3em\"\n    },\n    description: {\n      marginTop: \"2rem\",\n      height: \"100%\",\n      maxHeight: \"400px\"\n    },\n    box: {\n      marginTop: \"2rem\"\n    },\n    text: {\n      fontSize: \"0.5em\"\n    }\n  });\n}); // width:\"100%\"\n// maxWidth:\"600px\"\n\nfunction SwitchLabels(props) {\n  var _useState = useState({\n    checkedA: true,\n    checkedB: true\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var handleChange = function handleChange(event) {\n    setState(_objectSpread(_objectSpread({}, state), {}, _defineProperty({}, event.target.name, event.target.checked)));\n  };\n\n  return __jsx(FormGroup, {\n    row: true\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      onClick: props.toggleSortDate,\n      checked: state.checkedA,\n      onChange: handleChange,\n      name: \"checkedA\"\n    }),\n    label: \"Secondary\"\n  }), __jsx(FormControlLabel, {\n    control: __jsx(Switch, {\n      onClick: props.toggleListReverse,\n      checked: state.checkedB,\n      onChange: handleChange,\n      name: \"checkedB\",\n      color: \"primary\"\n    }),\n    label: \"Primary\"\n  }));\n}\n\nfunction Cards(_ref) {\n  var data = _ref.data,\n      error = _ref.error,\n      loading = _ref.loading;\n\n  var _useStyles = useStyles(),\n      file = _useStyles.file;\n\n  var classes = useStyles();\n  var router = useRouter();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      page = _React$useState2[0],\n      setPage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(2),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rowsPerPage = _React$useState4[0],\n      setRowsPerPage = _React$useState4[1];\n\n  var _useState2 = useState([]),\n      postList = _useState2[0],\n      setPostList = _useState2[1];\n\n  var _useState3 = useState(true),\n      isOldestFirst = _useState3[0],\n      setisOldestFirst = _useState3[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      open = _React$useState6[0],\n      setOpen = _React$useState6[1];\n\n  var postId = router.query.postId; // const [loading,setLoading] = useState(false)\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(event) {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  var handleChangePage = function handleChangePage(event, newPage) {\n    setPage(newPage);\n  }; // const handleClickOpen = () => {\n  //   setOpen(true);\n  // };\n  // const handleClose = () => {\n  //   setOpen(false);\n  // };\n\n\n  var sortByDate = function sortByDate() {\n    var newPostList = postList;\n\n    if (isOldestFirst) {\n      newPostList = postList.sort(function (a, b) {\n        return Date.parse(a.createdAt) - Date.parse(b.createdAt);\n      });\n    } else {\n      newPostList = postList.sort(function (a, b) {\n        return Date.parse(b.createdAt) - Date.parse(a.createdAt);\n      });\n    }\n\n    setPostList(newPostList);\n    setisOldestFirst(!isOldestFirst);\n  };\n\n  var toggleSortDate = function toggleSortDate() {\n    sortByDate();\n  };\n\n  var toggleListReverse = function toggleListReverse() {\n    var newPostList = postList.reverse();\n    setPostList(newPostList);\n  };\n\n  useEffect(function () {\n    if (!loading) {\n      var _postList = data.posts;\n      setisOldestFirst(true);\n      setPostList(_postList);\n    } // setLoading(!loading)\n\n  }, [postList]);\n\n  var ReadLimit = function ReadLimit(_ref2) {\n    var children = _ref2.children,\n        _ref2$maxCharacter = _ref2.maxCharacter,\n        maxCharacter = _ref2$maxCharacter === void 0 ? 120 : _ref2$maxCharacter;\n    var text = children;\n    var resultString = text.slice(0, maxCharacter);\n    return __jsx(Typography, {\n      style: {\n        fontSize: \"1rem\"\n      }\n    }, resultString);\n  };\n\n  return __jsx(Paper, {\n    component: Box,\n    style: {\n      padding: \"15px\"\n    },\n    className: classes.papper,\n    elevation: 3\n  }, __jsx(Grid, {\n    item: true,\n    className: classes[\"switch\"]\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    lg: true\n  }, __jsx(ScrollAnimation, {\n    animateIn: \"fadeIn\"\n  }, __jsx(Typography, {\n    variant: \"h1\"\n  }, \"\\u307F\\u3093\\u306A\\u306E\\u7559\\u5B66\\u4F53\\u9A13\\u8AC7\"))), __jsx(Grid, {\n    item: true,\n    container: true,\n    direction: \"row\",\n    justify: \"flex-end\",\n    md: true\n  }, __jsx(SwitchLabels, {\n    toggleListReverse: toggleListReverse,\n    toggleSortDate: toggleSortDate\n  }))), loading ? __jsx(Loading, null) : __jsx(Grid, {\n    container: true,\n    spacing: 3,\n    alignItems: \"center\",\n    justify: \"space-around\"\n  }, (rowsPerPage > 0 ? postList && postList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : postList).map(function (d) {\n    return __jsx(Grid, {\n      key: d._id,\n      item: true,\n      className: classes.card,\n      container: true,\n      direction: \"column\",\n      md: 4\n    }, __jsx(ScrollAnimation, {\n      animateIn: \"fadeIn\",\n      delay: 300\n    }, __jsx(Grid, {\n      item: true\n    }, __jsx(\"img\", {\n      src: d.file,\n      className: file,\n      alt: \"\"\n    })), __jsx(Grid, {\n      item: true,\n      className: classes.description\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      gutterBottom: true\n    }, d.postTitle)), __jsx(Grid, {\n      item: true\n    }, __jsx(ReadLimit, null, d.description)), __jsx(Grid, {\n      className: classes.box,\n      item: true,\n      container: true,\n      direction: \"row\",\n      justify: \"space-between\"\n    }, __jsx(Box, {\n      display: \"inline-block\"\n    }, __jsx(Link, {\n      href: \"/card/[studentDialog]?studentDialog=\".concat(d._id),\n      as: \"/card/\".concat(d._id)\n    }, __jsx(Button, {\n      fullWidth: true,\n      color: \"primary\",\n      variant: \"contained\"\n    }, \"\\u3082\\u3063\\u3068\\u8AAD\\u3080\"))))));\n  })), __jsx(TableFooter, null, __jsx(TableRow, null, __jsx(TablePagination, {\n    rowsPerPageOptions: [2, 4, 6],\n    colSpan: 2,\n    count: postList.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage\n  }))));\n}\n\nexport default Cards;","map":null,"metadata":{},"sourceType":"module"}